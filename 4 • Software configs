# ðŸŽ€ ---------- Create project diectory ----------

# ðŸŽ€ This block will write files in /home/bean/bean/, if you aren't using GitHub, use this as your project directory.
# ðŸŽ€ If you use GitHub, just clone the repo and use that as the directory.

cd ~
mkdir -p ~/bean/{audio,vision/faces,chat,hardware,utils,service}
touch ~/bean/{audio,vision,chat,hardware,utils}/__init__.py
touch ~/bean/main.py  # ðŸŽ€ Root entry point.
touch ~/bean/chat/{memory.txt,chatlogic.py}  # ðŸŽ€ Chat.
touch ~/bean/audio/{record.py,tts.py}  # ðŸŽ€ Audio.
touch ~/bean/vision/display.py  # ðŸŽ€ Display.
touch ~/bean/hardware/button.py  # ðŸŽ€ Hardware helpers.
touch ~/bean/utils/{config.py,logger.py}   # ðŸŽ€ Generic helpers.
touch ~/bean/service/bean.service  # ðŸŽ€ Future systemd service file.
touch ~/bean/audio/stt.py # ðŸŽ€ Audio STT.

# ðŸŽ€ ---------- Save your keys ----------

# ðŸŽ€ Create .env file inside the project root.
cd ~
nano .env

# ðŸŽ€ Inside nano add your keys.
OPENAI_API_KEY="KEY"
ELEVENLABS_API_KEY="KEY"

# ðŸŽ€ Stop Git from committing the keys lol.
echo -e "\n# Bean secrets\n.env" >> ~/.gitignore_global
git config --global core.excludesfile ~/.gitignore_global

# ðŸŽ€ Check if your keys are present. Once you run these it should print the first 8 characters of your keys.
python - <<'PY'
from os import getenv
from pathlib import Path
from dotenv import load_dotenv
load_dotenv(Path.home() / "bean" / ".env")
print("OpenAI key starts with:", getenv("OPENAI_API_KEY")[:8])
print("ElevenLabs key starts with:", getenv("ELEVENLABS_API_KEY")[:8])
PY

# ðŸŽ€ Make keys available to systemd service cos it doesn't read .bashrc.
sudo mkdir -p /etc/systemd/system/bean.service.d  # ðŸŽ€ Create a drop-in directory.
sudo nano /etc/systemd/system/bean.service.d/env.conf # ðŸŽ€ Add an environment directive.

# ðŸŽ€ Inside nano add this.
[Service]
EnvironmentFile=/home/bean/.env

# ðŸŽ€ Reload.
sudo systemctl daemon-reload

# ðŸŽ€ ---------- Connect to GitHub ----------

# ðŸŽ€ Generate SSH keys.
ssh-keygen -t ed25519 -C "me@bean"  # ðŸŽ€ Add this to your SSH keys on GitHub.

# ðŸŽ€ Stop Git from committing the keys.
echo -e '\n# SSH keys\n**/.ssh/\n**/id_*' >> ~/.gitignore_global

# ðŸŽ€ Clone your repo onto your Pi.
sudo apt update && sudo apt install git
cd ~
git clone git@github.com:USERNAME/REPO.git
cd REPO

# ðŸŽ€ Set your identify.
git config --global user.email "EMAIL"
git config --global user.name "NAME"

# ðŸŽ€ ---------- Initalise GitHub repo ----------

# ðŸŽ€ Only use this block if the repo you cloned doesn't already have a folder acting as your project directory.

# ðŸŽ€ Make a dedicated folder in the repo and copy everything except the repo itself into the folder.
mkdir -p RaspberryBean
rsync -av --progress \
      /home/bean/bean/  RaspberryBean/

# ðŸŽ€ Delete the originals ONLY when you have verified the copy.
rm -r /home/bean/bean/

# ðŸŽ€ Push to GitHub.
git add RaspberryBean
git status
git commit -m "Added RaspberryBean"
git push -u origin main

# ðŸŽ€ ---------- Working with GitHub ----------

# ðŸŽ€ Pull changes from GitHub to the Pi (only if there are no un-pushed commits; safer).
cd ~/Bean
git pull --ff-only

# ðŸŽ€ Pull changes from GitHub to the Pi (discards local edits and matches GitHub exactly).
cd ~/Bean
git fetch origin main && git reset --hard origin/main

# ðŸŽ€ Push changes from the Pi to GitHub.
cd ~/Bean
git add -A
git commit -m "Pushed from RaspberryBean"
git push
